'use strict';

function __$styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

/**
 * @class OccamyText
 */
var FONT_SIZE_VARIATION_DECREASE_FACTOR = 0.5;
var OccamyText = /** @class */ (function (_super) {
    __extends(OccamyText, _super);
    function OccamyText(props) {
        var _this = _super.call(this, props) || this;
        /** Internal methods **/
        _this.getSizeDiff = function () {
            if (!_this.content) {
                return {
                    value: 0,
                    axis: 'x',
                };
            }
            var x = _this.content.scrollWidth - _this.maxWidth;
            var y = _this.content.offsetHeight - _this.maxHeight;
            if (x > 0 && x > y) {
                return {
                    value: x,
                    axis: 'x',
                };
            }
            return {
                value: y,
                axis: 'y',
            };
        };
        _this.getFontSizeVariation = function (diff) {
            var variationStrategy = (diff.value > 0 && -1
                || diff.value < 0 && 1
                || 0);
            if (!variationStrategy) {
                return 0;
            }
            if (_this.variationStrategy !== null) {
                if (_this.variationStrategy !== variationStrategy) {
                    // variation changed
                    if (_this.isVariationStrategyChanged) {
                        // already changed in a previous iteration: we need to stop iterations
                        _this.isImperfectionReached = true;
                    }
                    else {
                        _this.isVariationStrategyChanged = true;
                    }
                    _this.variationStrategy = variationStrategy;
                }
                else {
                    _this.isVariationStrategyChanged = false;
                }
            }
            else {
                _this.variationStrategy = variationStrategy;
            }
            var diffRatio = Math.abs(diff.value) / (diff.axis === 'x' ? _this.maxWidth : _this.maxHeight);
            var fontSizeVariation = diffRatio * _this.fontSize * FONT_SIZE_VARIATION_DECREASE_FACTOR;
            if (fontSizeVariation < _this.props.minFontSizeVariation) {
                fontSizeVariation = _this.props.minFontSizeVariation;
            }
            else if (fontSizeVariation > _this.props.maxFontSizeVariation) {
                fontSizeVariation = _this.props.maxFontSizeVariation;
            }
            return fontSizeVariation * _this.variationStrategy;
        };
        _this.setRightFontSize = function () {
            if (!_this.content) {
                return false;
            }
            var diff = _this.getSizeDiff();
            _this.isVariationStrategyChanged = false;
            _this.isImperfectionReached = false;
            var fontSizeVariation = _this.getFontSizeVariation(diff);
            var nextFontSize = _this.fontSize + fontSizeVariation;
            // let counter = 0;
            // console.log('[OCCAMY_TEXT] fitting text', {
            //   fontSize: this.fontSize + 'px',
            //   contentHeight: this.content.offsetHeight + 'px',
            //   contentWidth: this.content.scrollWidth + 'px',
            //   maxHeight: this.maxHeight + 'px',
            //   maxWidth: this.maxWidth + 'px',
            //   canGrow: this.props.grow,
            //   canShrink: this.props.shrink,
            // });
            // while the text is higher then its wrapper (or maxHeight props)
            while (diff.value !== 0
                && (!_this.isImperfectionReached || diff.value > 0)
                && _this.fontSize > _this.props.minFontSize
                && _this.fontSize < _this.props.maxFontSize
                && (_this.props.shrink || nextFontSize >= _this.initialFontSize)
                && (_this.props.grow || nextFontSize <= _this.initialFontSize)) {
                // set a new fontSize
                _this.fontSize = _this.fontSize + fontSizeVariation;
                _this.content.setAttribute('style', "font-size: " + _this.fontSize + "px; line-height: " + _this.lineHeight);
                // console.log('[OCCAMY_TEXT] trying new font-size', {
                //   newFontSize: this.fontSize + 'px',
                //   fontSizeVariation: fontSizeVariation + 'px',
                //   contentHeight: this.content.offsetHeight + 'px',
                //   contentWidth: this.content.scrollWidth + 'px',
                // });
                diff = _this.getSizeDiff();
                fontSizeVariation = _this.getFontSizeVariation(diff);
                nextFontSize = _this.fontSize + fontSizeVariation;
                // counter++;
            }
            // console.log('[OCCAMY_TEXT] found right font-size', {
            //   fontSize: this.fontSize + 'px',
            //   attempts: counter,
            //   tollerance: Math.abs(this.maxHeight - this.content.offsetHeight) + 'px',
            //   contentHeight: this.content.offsetHeight + 'px',
            //   contentWidth: this.content.scrollWidth + 'px',
            //   maxHeight: this.maxHeight + 'px',
            //   maxWidth: this.maxWidth + 'px',
            // });
            return true;
        };
        _this.maxHeight = Infinity;
        _this.maxWidth = Infinity;
        _this.fontSize = -1;
        _this.initialFontSize = -1;
        _this.lineHeight = null;
        _this.variationStrategy = null;
        _this.isVariationStrategyChanged = false;
        _this.isImperfectionReached = false;
        return _this;
    }
    /** React lifecycle **/
    OccamyText.prototype.componentWillMount = function () {
        if (this.props.maxHeight) {
            this.maxHeight = this.props.maxHeight;
        }
    };
    OccamyText.prototype.componentDidMount = function () {
        if (!this.content) {
            return;
        }
        if (this.wrapper) {
            if (!this.props.maxHeight) {
                this.maxHeight = this.wrapper.offsetHeight;
            }
            this.maxWidth = this.wrapper.offsetWidth;
        }
        this.fontSize = parseInt(window.getComputedStyle(this.content).getPropertyValue('font-size'), 10);
        this.initialFontSize = this.fontSize;
        var lineHeight = window.getComputedStyle(this.content).getPropertyValue('line-height');
        var computedLineHeight = parseInt(lineHeight, 10);
        this.lineHeight = computedLineHeight > 0 ? computedLineHeight / this.fontSize : lineHeight;
        // console.log('[OCCAMY_TEXT] initial values', {
        //   fontSize: this.fontSize,
        //   maxHeight: this.maxHeight,
        //   maxWidth: this.maxWidth,
        //   lineHeight: this.lineHeight,
        // });
        this.setRightFontSize();
    };
    OccamyText.prototype.componentWillReceiveProps = function () {
        if (this.props.maxHeight) {
            this.maxHeight = this.props.maxHeight;
        }
    };
    OccamyText.prototype.componentDidUpdate = function () {
        if (!this.props.maxHeight && this.wrapper) {
            this.maxHeight = this.wrapper.offsetHeight;
            this.maxWidth = this.wrapper.offsetWidth;
            this.setRightFontSize();
        }
    };
    /** Render **/
    OccamyText.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, className = _a.className, style = _a.style, _ = _a.grow, __ = _a.maxFontSize, ___ = _a.maxFontSizeVariation, ____ = _a.maxHeight, _____ = _a.minFontSize, ______ = _a.minFontSizeVariation, _______ = _a.shrink, props = __rest(_a, ["children", "className", "style", "grow", "maxFontSize", "maxFontSizeVariation", "maxHeight", "minFontSize", "minFontSizeVariation", "shrink"]);
        var wrapperClasses = className ? className + " occamy-text" : 'occamy-text';
        var wrapperStyle = __assign({}, style, { height: '100%' });
        var contentStyle = {
            fontSize: this.fontSize ? this.fontSize + "px" : undefined,
            lineHeight: this.lineHeight ? this.lineHeight + "em" : undefined,
        };
        return (React.createElement("div", __assign({ ref: function (r) { return _this.wrapper = r; }, className: wrapperClasses, style: wrapperStyle }, props),
            React.createElement("div", { ref: function (r) { return _this.content = r; }, className: "occamy-text--content", style: contentStyle }, children)));
    };
    OccamyText.defaultProps = {
        grow: true,
        maxFontSize: 96,
        maxFontSizeVariation: 8,
        minFontSize: 4,
        minFontSizeVariation: 0.3,
        shrink: true,
        style: {},
    };
    return OccamyText;
}(React.PureComponent));

exports.default = OccamyText;
//# sourceMappingURL=index.js.map
