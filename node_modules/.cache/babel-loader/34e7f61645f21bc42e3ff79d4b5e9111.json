{"ast":null,"code":"const audioUtils = require('./audioUtils'); // for encoding audio data as PCM\n\n\nconst crypto = require('crypto'); // tot sign our pre-signed URL\n\n\nconst v4 = require('./aws-signature-v4'); // to generate our pre-signed URL\n\n\nconst marshaller = require(\"@aws-sdk/eventstream-marshaller\"); // for converting binary event stream messages to and from JSON\n\n\nconst util_utf8_node = require(\"@aws-sdk/util-utf8-node\"); // utilities for encoding and decoding UTF8\n\n\nconst mic = require('microphone-stream'); // collect microphone input as a stream of raw bytes\n\n\nconst $ = require('jquery'); // our converter between binary event streams messages and JSON\n\n\nconst eventStreamMarshaller = new marshaller.EventStreamMarshaller(util_utf8_node.toUtf8, util_utf8_node.fromUtf8); // our global variables for managing state\n\nlet languageCode;\nlet region;\nlet sampleRate;\nlet transcription = \"\";\nlet socket;\nlet micStream;\nlet socketError = false;\nlet transcribeException = false; // check to see if the browser allows mic access\n\nif (!window.navigator.mediaDevices.getUserMedia) {\n  // Use our helper method to show an error on the page\n  showError('We support the latest versions of Chrome, Firefox, Safari, and Edge. Update your browser and try your request again.'); // maintain enabled/distabled state for the start and stop buttons\n\n  toggleStartStop();\n}\n\nexport function startbutton() {\n  console.log(\"buttontest1\");\n  toggleStartStop(true); // disable start and enable stop button\n  // set the language and region from the dropdowns\n\n  setLanguage();\n  setRegion(); // first we get the microphone input from the browser (as a promise)...\n  //window.navigator.mediaDevices.getUserMedia({ video: false, audio: true }).then(streamAudioToWebSocket)\n  // ...then we convert the mic stream to binary event stream messages when the promise resolves \n  //.catch(function (error) {\n  //    console.log(\"ERROR\");\n  //    showError('There was an error streaming your audio to Amazon Transcribe. Please try again.');\n  //    toggleStartStop();\n  //});\n\n  streamAudioToWebSocket();\n}\n;\n\nlet streamAudioToWebSocket = function (userMediaStream) {\n  //let's get the mic input from the browser, via the microphone-stream module\n  //console.log(\"streamAudioToWebSocket\");\n  window.navigator.mediaDevices.getUserMedia({\n    video: false,\n    audio: true\n  }).then(stream => {\n    micStream = new mic();\n    micStream.setStream(stream); //console.log(\"buttontest2\");\n    // Pre-signed URLs are a way to authenticate a request (or WebSocket connection, in this case)\n    // via Query Parameters. Learn more: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n\n    let url = createPresignedUrl(); //open up our WebSocket connection\n\n    socket = new WebSocket(url); //console.log(\"socket return: \", socket);\n\n    socket.binaryType = \"arraybuffer\"; // when we get audio data from the mic, send it to the WebSocket if possible\n\n    socket.onopen = function () {\n      //console.log(\"micstream.on test2a\");\n      micStream.on('data', chunk => {\n        //console.log(\"micstream.on test2b\");\n        var raw = mic.toRaw(chunk); //console.log(\"micstream.on test3\");\n\n        if (raw == null) {\n          return;\n        }\n\n        console.log(\"binary1: \");\n        var binary = convertAudioToBinaryMessage(raw); //console.log(\"binary2: \", binary);\n\n        if (socket.OPEN) {\n          console.log(\"socket\");\n          socket.send(binary);\n        }\n\n        ;\n      }); //        micStream.on('data', function(rawAudioChunk) {\n      //                console.log(\"rawAudioChunk:\", rawAudioChunk);\n      //            // the audio stream is raw audio bytes. Transcribe expects PCM with additional metadata, encoded as binary\n      //                let binary = convertAudioToBinaryMessage(rawAudioChunk);\n      //                console.log(\"binary2: \", binary);\n    };\n\n    socket.onerror = function () {\n      socketError = true;\n      showError('WebSocket connection error. Try again.');\n      console.log(\"WebSocket connection error. Try again.\");\n      toggleStartStop();\n    };\n\n    socket.onclose = function (closeEvent) {\n      //console.log(\"micStream.stop: \", closeEvent);\n      micStream.stop();\n    }; // handle messages, errors, and close events\n\n\n    wireSocketEvents();\n  });\n};\n\nfunction setLanguage() {\n  //languageCode = $('#language').find(':selected').val();\n  languageCode = \"en-US\";\n  if (languageCode == \"en-US\" || languageCode == \"es-US\") sampleRate = 44100;else sampleRate = 8800;\n}\n\nfunction setRegion() {\n  //region = $('#region').find(':selected').val();\n  region = 'us-east-1';\n}\n\nfunction wireSocketEvents() {\n  //console.log(\"wiresocketEvent test\");\n  // handle inbound messages from Amazon Transcribe\n  socket.onmessage = function (message) {\n    //convert the binary event stream message to JSON\n    console.log(\"message.data :\", message.data);\n    let messageWrapper = eventStreamMarshaller.unmarshall(Buffer(message.data));\n    console.log(\"messageWrapper\", messageWrapper);\n    let messageBody = JSON.parse(String.fromCharCode.apply(String, messageWrapper.body));\n    console.log(\"headers: \", messageWrapper.headers[\":message-type\"].value);\n\n    if (messageWrapper.headers[\":message-type\"].value === \"event\") {\n      console.log(\"messageWrapper.headers\");\n      handleEventStreamMessage(messageBody);\n    } else {\n      console.log(\"messageWrapper.error\");\n      transcribeException = true;\n      showError(messageBody.Message);\n      toggleStartStop();\n    }\n  };\n\n  socket.onerror = function () {\n    socketError = true;\n    showError('WebSocket connection error. Try again.');\n    console.log(\"WebSocket connection error. Try again.\");\n    toggleStartStop();\n  };\n\n  socket.onclose = function (closeEvent) {\n    console.log(\"micStream.stop: \", closeEvent);\n    micStream.stop(); // the close event immediately follows the error event; only handle one.\n\n    if (!socketError && !transcribeException) {\n      if (closeEvent.code != 1000) {\n        showError('</i><strong>Streaming Exception</strong><br>' + closeEvent.reason);\n      }\n\n      toggleStartStop();\n    }\n  };\n}\n\nlet handleEventStreamMessage = function (messageJson) {\n  let results = messageJson.Transcript.Results;\n\n  if (results.length > 0) {\n    if (results[0].Alternatives.length > 0) {\n      let transcript = results[0].Alternatives[0].Transcript; // fix encoding for accented characters\n\n      transcript = decodeURIComponent(escape(transcript)); // update the textarea with the latest result\n\n      $('#transcript').val(transcription + transcript + \"\\n\"); // if this transcript segment is final, add it to the overall transcription\n\n      if (!results[0].IsPartial) {\n        //scroll the textarea down\n        $('#transcript').scrollTop($('#transcript')[0].scrollHeight);\n        transcription += transcript + \"\\n\";\n      }\n    }\n  }\n};\n\nlet closeSocket = function () {\n  if (socket.OPEN) {\n    micStream.stop(); // Send an empty frame so that Transcribe initiates a closure of the WebSocket after submitting all transcripts\n\n    let emptyMessage = getAudioEventMessage(Buffer.from(new Buffer([])));\n    let emptyBuffer = eventStreamMarshaller.marshall(emptyMessage);\n    socket.send(emptyBuffer);\n  }\n};\n\n$('#stop-button').click(function () {\n  closeSocket();\n  toggleStartStop();\n});\nexport function resetbutton() {\n  $('#transcript').val('');\n  transcription = '';\n}\n;\n\nfunction toggleStartStop(disableStart = false) {\n  $('#start-button').prop('disabled', disableStart);\n  $('#stop-button').attr(\"disabled\", !disableStart);\n}\n\nfunction showError(message) {\n  $('#error').html('<i class=\"fa fa-times-circle\"></i> ' + message);\n  $('#error').show();\n}\n\nfunction convertAudioToBinaryMessage(audioChunk) {\n  console.log(\"start convertAudioToBinaryMessage\");\n  let raw = mic.toRaw(audioChunk);\n\n  if (raw == null) {\n    console(\"raw null\");\n    return;\n  }\n\n  console.log(\"raw not null\"); // downsample and convert the raw audio bytes to PCM\n\n  let downsampledBuffer = audioUtils.downsampleBuffer(raw, sampleRate);\n  let pcmEncodedBuffer = audioUtils.pcmEncode(downsampledBuffer); // add the right JSON headers and structure to the message\n\n  let audioEventMessage = getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n  console.log('audioeventmessage: ', audioEventMessage); //convert the JSON object + headers into a binary event stream message\n\n  let binary = eventStreamMarshaller.marshall(audioEventMessage);\n  console.log(\"binary :\", binary);\n  return binary;\n}\n\nfunction getAudioEventMessage(buffer) {\n  // wrap the audio data in a JSON envelope\n  return {\n    headers: {\n      ':message-type': {\n        type: 'string',\n        value: 'event'\n      },\n      ':event-type': {\n        type: 'string',\n        value: 'AudioEvent'\n      }\n    },\n    body: buffer\n  };\n}\n\nfunction createPresignedUrl() {\n  let endpoint = \"transcribestreaming.\" + region + \".amazonaws.com:8443\"; // get a preauthenticated URL that we can use to establish our WebSocket\n\n  return v4.createPresignedURL('GET', endpoint, '/stream-transcription-websocket', 'transcribe', crypto.createHash('sha256').update('', 'utf8').digest('hex'), {\n    'key': $('#access_id').val(),\n    'secret': $('#secret_key').val(),\n    'sessionToken': $('#session_token').val(),\n    'protocol': 'wss',\n    'expires': 15,\n    'region': region,\n    'query': \"language-code=\" + languageCode + \"&media-encoding=pcm&sample-rate=\" + sampleRate\n  });\n}","map":{"version":3,"sources":["/home/ec2-user/environment/myapp/src/lib/main.js"],"names":["audioUtils","require","crypto","v4","marshaller","util_utf8_node","mic","$","eventStreamMarshaller","EventStreamMarshaller","toUtf8","fromUtf8","languageCode","region","sampleRate","transcription","socket","micStream","socketError","transcribeException","window","navigator","mediaDevices","getUserMedia","showError","toggleStartStop","startbutton","console","log","setLanguage","setRegion","streamAudioToWebSocket","userMediaStream","video","audio","then","stream","setStream","url","createPresignedUrl","WebSocket","binaryType","onopen","on","chunk","raw","toRaw","binary","convertAudioToBinaryMessage","OPEN","send","onerror","onclose","closeEvent","stop","wireSocketEvents","onmessage","message","data","messageWrapper","unmarshall","Buffer","messageBody","JSON","parse","String","fromCharCode","apply","body","headers","value","handleEventStreamMessage","Message","code","reason","messageJson","results","Transcript","Results","length","Alternatives","transcript","decodeURIComponent","escape","val","IsPartial","scrollTop","scrollHeight","closeSocket","emptyMessage","getAudioEventMessage","from","emptyBuffer","marshall","click","resetbutton","disableStart","prop","attr","html","show","audioChunk","downsampledBuffer","downsampleBuffer","pcmEncodedBuffer","pcmEncode","audioEventMessage","buffer","type","endpoint","createPresignedURL","createHash","update","digest"],"mappings":"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","sourcesContent":["const audioUtils        = require('./audioUtils');  // for encoding audio data as PCM\nconst crypto            = require('crypto'); // tot sign our pre-signed URL\nconst v4                = require('./aws-signature-v4'); // to generate our pre-signed URL\nconst marshaller        = require(\"@aws-sdk/eventstream-marshaller\"); // for converting binary event stream messages to and from JSON\nconst util_utf8_node    = require(\"@aws-sdk/util-utf8-node\"); // utilities for encoding and decoding UTF8\nconst mic               = require('microphone-stream'); // collect microphone input as a stream of raw bytes\nconst $                 = require('jquery');\n\n// our converter between binary event streams messages and JSON\nconst eventStreamMarshaller = new marshaller.EventStreamMarshaller(util_utf8_node.toUtf8, util_utf8_node.fromUtf8);\n\n// our global variables for managing state\nlet languageCode;\nlet region;\nlet sampleRate;\nlet transcription = \"\";\nlet socket;\nlet micStream;\nlet socketError = false;\nlet transcribeException = false;\n\n\n// check to see if the browser allows mic access\nif (!window.navigator.mediaDevices.getUserMedia) {\n    // Use our helper method to show an error on the page\n    showError('We support the latest versions of Chrome, Firefox, Safari, and Edge. Update your browser and try your request again.');\n\n    // maintain enabled/distabled state for the start and stop buttons\n    toggleStartStop();\n}\n\n    export function startbutton () {\n    console.log(\"buttontest1\");\n    toggleStartStop(true); // disable start and enable stop button\n\n    // set the language and region from the dropdowns\n    setLanguage();\n    setRegion();\n\n    // first we get the microphone input from the browser (as a promise)...\n    //window.navigator.mediaDevices.getUserMedia({ video: false, audio: true }).then(streamAudioToWebSocket)\n        // ...then we convert the mic stream to binary event stream messages when the promise resolves \n        //.catch(function (error) {\n        //    console.log(\"ERROR\");\n        //    showError('There was an error streaming your audio to Amazon Transcribe. Please try again.');\n        //    toggleStartStop();\n        //});\n        streamAudioToWebSocket();\n};\n\nlet streamAudioToWebSocket = function (userMediaStream) {\n    //let's get the mic input from the browser, via the microphone-stream module\n    //console.log(\"streamAudioToWebSocket\");\n    window.navigator.mediaDevices.getUserMedia({ video: false, audio: true }).then((stream) => {\n    micStream = new mic();\n    micStream.setStream(stream);\n    //console.log(\"buttontest2\");\n\n    // Pre-signed URLs are a way to authenticate a request (or WebSocket connection, in this case)\n    // via Query Parameters. Learn more: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n    let url = createPresignedUrl();\n\n    //open up our WebSocket connection\n        socket = new WebSocket(url);\n    //console.log(\"socket return: \", socket);\n    socket.binaryType = \"arraybuffer\";\n\n    // when we get audio data from the mic, send it to the WebSocket if possible\n    socket.onopen = function() {\n        //console.log(\"micstream.on test2a\");\n        micStream.on('data', (chunk) => {\n          //console.log(\"micstream.on test2b\");\n          var raw = mic.toRaw(chunk);\n          //console.log(\"micstream.on test3\");\n          if (raw == null) {\n            return;\n          }\n        console.log(\"binary1: \");\n          var binary = convertAudioToBinaryMessage(raw);\n          //console.log(\"binary2: \", binary);\n            \n                if (socket.OPEN) {\n                console.log(\"socket\");\n                socket.send(binary);\n            };\n        });\n//        micStream.on('data', function(rawAudioChunk) {\n//                console.log(\"rawAudioChunk:\", rawAudioChunk);\n//            // the audio stream is raw audio bytes. Transcribe expects PCM with additional metadata, encoded as binary\n//                let binary = convertAudioToBinaryMessage(rawAudioChunk);\n//                console.log(\"binary2: \", binary);\n                \n\n        };\n        \n        socket.onerror = function () {\n        socketError = true;\n        showError('WebSocket connection error. Try again.');\n        console.log(\"WebSocket connection error. Try again.\");\n        toggleStartStop();\n    };\n    \n        socket.onclose = function (closeEvent) {\n        //console.log(\"micStream.stop: \", closeEvent);\n        micStream.stop();\n        }\n\n    // handle messages, errors, and close events\n    wireSocketEvents();\n    });\n}\n\nfunction setLanguage() {\n    //languageCode = $('#language').find(':selected').val();\n    languageCode = \"en-US\" \n    if (languageCode == \"en-US\" || languageCode == \"es-US\")\n        sampleRate = 44100;\n    else\n        sampleRate = 8800;\n}\n\nfunction setRegion() {\n    //region = $('#region').find(':selected').val();\n    region = 'us-east-1';\n}\n\nfunction wireSocketEvents() {\n    //console.log(\"wiresocketEvent test\");\n    // handle inbound messages from Amazon Transcribe\n    socket.onmessage = function (message) {\n        //convert the binary event stream message to JSON\n        console.log(\"message.data :\", message.data);\n        let messageWrapper = eventStreamMarshaller.unmarshall(Buffer(message.data));\n        console.log(\"messageWrapper\", messageWrapper);\n        let messageBody = JSON.parse(String.fromCharCode.apply(String, messageWrapper.body));\n        console.log(\"headers: \", messageWrapper.headers[\":message-type\"].value);\n        if (messageWrapper.headers[\":message-type\"].value === \"event\") {\n            console.log(\"messageWrapper.headers\");\n            handleEventStreamMessage(messageBody);\n        }\n        else {\n            console.log(\"messageWrapper.error\");\n            transcribeException = true;\n            showError(messageBody.Message);\n            toggleStartStop();\n        }\n    };\n\n    socket.onerror = function () {\n        socketError = true;\n        showError('WebSocket connection error. Try again.');\n        console.log(\"WebSocket connection error. Try again.\");\n        toggleStartStop();\n    };\n    \n    socket.onclose = function (closeEvent) {\n        console.log(\"micStream.stop: \", closeEvent);\n        micStream.stop();\n        \n        // the close event immediately follows the error event; only handle one.\n        if (!socketError && !transcribeException) {\n            if (closeEvent.code != 1000) {\n                showError('</i><strong>Streaming Exception</strong><br>' + closeEvent.reason);\n            }\n            toggleStartStop();\n        }\n    };\n}\n\nlet handleEventStreamMessage = function (messageJson) {\n    let results = messageJson.Transcript.Results;\n\n    if (results.length > 0) {\n        if (results[0].Alternatives.length > 0) {\n            let transcript = results[0].Alternatives[0].Transcript;\n\n            // fix encoding for accented characters\n            transcript = decodeURIComponent(escape(transcript));\n\n            // update the textarea with the latest result\n            $('#transcript').val(transcription + transcript + \"\\n\");\n\n            // if this transcript segment is final, add it to the overall transcription\n            if (!results[0].IsPartial) {\n                //scroll the textarea down\n                $('#transcript').scrollTop($('#transcript')[0].scrollHeight);\n\n                transcription += transcript + \"\\n\";\n            }\n        }\n    }\n}\n\nlet closeSocket = function () {\n    if (socket.OPEN) {\n        micStream.stop();\n\n        // Send an empty frame so that Transcribe initiates a closure of the WebSocket after submitting all transcripts\n        let emptyMessage = getAudioEventMessage(Buffer.from(new Buffer([])));\n        let emptyBuffer = eventStreamMarshaller.marshall(emptyMessage);\n        socket.send(emptyBuffer);\n    }\n}\n\n$('#stop-button').click(function () {\n    closeSocket();\n    toggleStartStop();\n});\n\nexport function resetbutton () {\n    $('#transcript').val('');\n    transcription = '';\n};\n\nfunction toggleStartStop(disableStart = false) {\n    $('#start-button').prop('disabled', disableStart);\n    $('#stop-button').attr(\"disabled\", !disableStart);\n}\n\nfunction showError(message) {\n    $('#error').html('<i class=\"fa fa-times-circle\"></i> ' + message);\n    $('#error').show();\n}\n\nfunction convertAudioToBinaryMessage(audioChunk) {\n    console.log(\"start convertAudioToBinaryMessage\");\n    let raw = mic.toRaw(audioChunk);\n\n    if (raw == null) {\n        console(\"raw null\");\n        return;\n    }\n\n    console.log(\"raw not null\");\n    // downsample and convert the raw audio bytes to PCM\n    let downsampledBuffer = audioUtils.downsampleBuffer(raw, sampleRate);\n    let pcmEncodedBuffer = audioUtils.pcmEncode(downsampledBuffer);\n\n    // add the right JSON headers and structure to the message\n    let audioEventMessage = getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    console.log('audioeventmessage: ', audioEventMessage);\n\n    //convert the JSON object + headers into a binary event stream message\n    let binary = eventStreamMarshaller.marshall(audioEventMessage);\n    console.log(\"binary :\", binary);\n    return binary;\n}\n\nfunction getAudioEventMessage(buffer) {\n    // wrap the audio data in a JSON envelope\n    return {\n        headers: {\n            ':message-type': {\n                type: 'string',\n                value: 'event'\n            },\n            ':event-type': {\n                type: 'string',\n                value: 'AudioEvent'\n            }\n        },\n        body: buffer\n    };\n}\n\nfunction createPresignedUrl() {\n    let endpoint = \"transcribestreaming.\" + region + \".amazonaws.com:8443\";\n\n    // get a preauthenticated URL that we can use to establish our WebSocket\n    return v4.createPresignedURL(\n        'GET',\n        endpoint,\n        '/stream-transcription-websocket',\n        'transcribe',\n        crypto.createHash('sha256').update('', 'utf8').digest('hex'), {\n            'key': $('#access_id').val(),\n            'secret': $('#secret_key').val(),\n            'sessionToken': $('#session_token').val(),\n            'protocol': 'wss',\n            'expires': 15,\n            'region': region,\n            'query': \"language-code=\" + languageCode + \"&media-encoding=pcm&sample-rate=\" + sampleRate\n        }\n    );\n}\n"]},"metadata":{},"sourceType":"module"}